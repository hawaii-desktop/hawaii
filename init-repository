#!/usr/bin/env python2

import argparse, sys, os
from buildconf import *

ROOT_DIR = os.path.abspath(os.path.dirname(__file__))

def run_sync(args, cwd=None):
    import subprocess
    print "+ %s (from %s)" % (subprocess.list2cmdline(args), cwd)

    stdin_target = open('/dev/null', 'r')
    stdout_target = sys.stdout
    stderr_target = sys.stderr

    proc = subprocess.Popen(args, stdin=stdin_target, stdout=stdout_target, stderr=stderr_target,
        close_fds=True, cwd=cwd)
    stdin_target.close()
    returncode = proc.wait()
    if returncode != 0:
        print >> sys.stderr, "pid %d exited with code %d" % (proc.pid, returncode)
    return returncode

def gitconfig():
    import subprocess
    lines = []
    proc = subprocess.Popen(["git", "config", "-l"], stdout=subprocess.PIPE)
    for line in proc.stdout:
        lines.append(line.rstrip())
    return lines

def module(string):
    """Argument parser type checker for module arguments"""
    if string in MODULES.keys():
        return string

    raise argparse.ArgumentTypeError("No such module '%s'" % string)

def fetch(args):
    parms = ["git", "submodule", "init"]
    parms.extend(args.submodules)
    run_sync(parms)

    run_sync(["git", "config", "commit.template", os.path.join(ROOT_DIR, ".commit-template")])

    parms = ["git", "submodule", "update"]
    parms.extend(args.submodules)
    run_sync(parms)

    for submodule in submodules:
        run_sync(["git", "submodule", "update", "--init"], cwd=submodule)

    # Set commit template for all submodules
    for submodule in args.submodules:
        run_sync(["git", "config", "commit.template", os.path.join(ROOT_DIR, ".commit-template")], cwd=submodule)

def switch(args):
    def switch_submodule(value, old_base_url, new_base_url):
        value = value.replace(old_base_url, new_base_url)
        run_sync(["git", "config", "submodule.%s.url" % key, value])
        run_sync(["git", "remote", "set-url", "origin", value], cwd=key)

    def switch_remote(value, old_base_url, new_base_url):
        value = value.replace(old_base_url, new_base_url)
        run_sync(["git", "remote", "set-url", "origin", value])

    import re

    old_base_url = BASE_URLS["ssh" if args.mode == "http" else "http"]
    new_base_url = BASE_URLS[args.mode]

    config = gitconfig()
    for conf in config:
        # Only handle configuration lines about submodules...
        m = re.search(r'submodule\.([^.=]+)\.url=(.*)', conf)
        if m:
            # Get submodule name and URL
            key, value = m.groups()

            # Switch to the new URL
            if value[:len(old_base_url)]:
                switch_submodule(value, old_base_url, new_base_url)
        else:
            # ...or the remote
            m = re.search(r'remote\.origin\.url=(.*)', conf)
            if not m:
                continue

            # Get the URL
            value = m.groups()[0]

            # Switch to the new URL
            if value[:len(old_base_url)]:
                switch_remote(value, old_base_url, new_base_url)

def branch(args):
    for submodule in args.submodules:
        if not MODULES.has_key(submodule):
            continue
        branch = MODULES[submodule].get("branch", None)
        if branch:
            run_sync(["git", "checkout", branch], cwd=submodule)

def forward(args):
    for module in args.submodules:
        # Update the submodule
        run_sync(["git", "pull"], cwd=module)

        # This submodule needs a rebuild
        for f in (COOKIENAME_CONFIGURE, COOKIENAME_BUILD):
            cookiefilename = os.path.join(ROOT_DIR, "build", module, f)
            if os.path.exists(cookiefilename):
                os.unlink(cookiefilename)

if __name__ == "__main__":
    submodules = list(set(MODULES.keys()) - set(IGNORED_MODULES))

    root_parser = argparse.ArgumentParser()
    sps = root_parser.add_subparsers()

    sp = sps.add_parser("fetch", help="initialize and check out submodules")
    sp.add_argument("submodules", nargs='*', type=module)
    sp.set_defaults(func=fetch, submodules=submodules)

    sp = sps.add_parser("switch", help="switch repository URL for GitHub repositories")
    sp.add_argument("--http", dest="mode", action="store_const", const="http")
    sp.add_argument("--ssh", dest="mode", action="store_const", const="ssh")
    sp.set_defaults(func=switch, mode="http")

    sp = sps.add_parser("forward", help="pull modules in each folder")
    sp.add_argument("submodules", nargs='*', type=module)
    sp.set_defaults(func=forward, submodules=submodules)

    sp = sps.add_parser("branch", help="switch each submodule to the default branch")
    sp.add_argument("submodules", nargs='*', type=module)
    sp.set_defaults(func=branch, submodules=submodules)

    args = root_parser.parse_args()
    args.func(args)

# vim:set ts=4 sw=4 et:
