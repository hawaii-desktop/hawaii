#!/usr/bin/env python2

import argparse, subprocess, sys, os, datetime
from buildconf import *

ROOT_DIR = os.path.abspath(os.path.dirname(__file__))

CUSTOM_CMAKE_ARGS = {
    "libqtxdg": ["-DUSE_QT5=ON",]
}

class Module:
    def __init__(self, name):
        self._name = name
        self._deps = []

    @property
    def name(self):
        return self._name

    @property
    def dependencies(self):
        return tuple(self._deps)

    def add_dependency(self, mod):
        self._deps.append(mod)

    def __str__(self):
        return self._name

    def __unicode__(self):
        return self._name

    def __repr__(self):
        return "<Module:%s>" % self._name

def parse_args(args):
    # Convert arguments to a dictionary
    params = vars(args)

    # CMake arguments from parameters
    cmakeargs = []
    for key in params.keys():
        # Ignore arguments that we are not interested in
        if key not in ("prefix", "build_type"):
            continue

        # Append the argument if makes sense
        if not params[key]:
            continue
        cmdname = key.upper()
        if key != "build_type":
            cmdname = "INSTALL_" + cmdname
        cmakeargs.append("-DCMAKE_%s=%s" % (cmdname, params[key]))

    return cmakeargs

def exec_cmd(cmd, workdir, env=None, shell=False):
    import shlex
    try:
        print "%s (from %s)" % (cmd, workdir)
        proc = subprocess.Popen(shlex.split(cmd), cwd=workdir, env=env, shell=shell)
        retcode = proc.wait()
        if retcode < 0:
            print >>sys.stderr, "Child was terminated by signal", -retcode
            return False
        elif retcode != 0:
            print >>sys.stderr, "Child failed with exitcode", retcode
            return False
    except OSError, e:
        print >>sys.stderr, "Execution failed:", e
        return False

    return True

# From http://www.electricmonk.nl/log/2008/08/07/dependency-resolving-algorithm/
def resolve_deps(mod, resolved, unresolved):
    unresolved.append(mod)
    for dep in mod.dependencies:
        if dep not in resolved:
            if dep in unresolved:
                raise Exception("Circular dependency detected: %s -> %s'" % (mod.name, dep.name))
            resolve_deps(dep, resolved, unresolved)
    resolved.append(mod)
    unresolved.remove(mod)

def determine_modules(args, moduleslist):
    """Create a dictionary of Modules."""
    modules = {}

    # Ignore modules on the black list
    blacklist = args.blacklist if args.blacklist else []
    whitelist = args.whitelist if args.whitelist else []
    blacklist = list(set(IGNORED_MODULES + blacklist) - set(whitelist))

    # Create an entry for each module
    for m in MODULES.keys():
        modules[m] = Module(m)

    # Add dependencies
    for k in modules.keys():
        dependencies = DEPENDENCIES[k].split(',') if DEPENDENCIES[k] else None
        if dependencies:
            for dependency in dependencies:
                modules[k].add_dependency(modules[dependency])

    # Returns only the modules we need
    supported_modules = {}
    for module in moduleslist:
        if module not in blacklist:
            supported_modules[module] = modules[module]

    return supported_modules

def build(args):
    moduleslist = MODULES.keys()

    # Override modules with the ones from the command line
    if args.module:
        moduleslist = args.module

    # Check whether all modules exists
    status = True
    for m in moduleslist:
        if m not in MODULES.keys():
            print >>sys.stderr, "Unknown '%s' submodule!" % m
            status = False
        elif os.path.exists(m):
            if not os.path.isdir(m):
                print >>sys.stderr, "Something is wrong with your setup, '%s' exists but it's not a directory" % m
                status = False
        else:
            print >>sys.stderr, "The '%s' submodule wasn't checked out, run ./init-repository fetch!" % m
            status = False
    if not status:
        return False

    # Determine modules and dependencies
    modules = determine_modules(args, moduleslist)

    # Resolve dependencies
    resolved = []
    unresolved = []
    for k in modules.keys():
        resolve_deps(modules[k], resolved, unresolved)
    print "\n== Building the following modules:\n"
    for mod in resolved:
        print "\t%s" % mod.name
    print "\n"

    # Build all modules
    for mod in resolved:
        if not build_module(mod, args):
            return False
    return True

def build_module(module, args):
    import shutil

    print "===> Building %s ..." % module.name

    cmakeargs = parse_args(args)
    moduledir = os.path.join(ROOT_DIR, module.name)
    builddir = os.path.join(ROOT_DIR, "build")
    workdir = os.path.join(builddir, module.name)
    origworkdir = os.getcwd()
    retval = True
    buildsys = "cmake"

    # Setup environment
    env = os.environ.copy()
    pkg_config_path = "%s/lib/pkgconfig" % args.prefix
    if env.has_key("PKG_CONFIG_PATH"):
        env["PKG_CONFIG_PATH"] += ":%s" % pkg_config_path
    else:
        env["PKG_CONFIG_PATH"] = pkg_config_path

    # CMake arguments
    cmakeargs.extend([
        "-DCMAKE_PREFIX_PATH=%s/lib/cmake" % args.prefix,
        "-DCMAKE_INSTALL_LIBDIR=lib",
        "-DCMAKE_BUILD_TYPE=Debug",
        "-DLIB_INSTALL_DIR=%s/lib" % args.prefix
    ])
    cmakeargs.extend(CUSTOM_CMAKE_ARGS.get(module.name, []))

    # Detect a qmake-based build system
    for entry in os.listdir(moduledir):
        if os.path.splitext(entry)[1] == ".pro":
            buildsys = "qmake"
            qmake_project = os.path.join(moduledir, entry)
            break
        if os.path.basename(entry) == "autogen.sh":
            buildsys = "autotools"
            break

    # Create the build directory if it's either not found or we're in rebuild mode
    if not os.path.exists(os.path.join(workdir, COOKIENAME_CONFIGURE)) or args.rebuild:
        # Create the working directory
        if os.path.exists(workdir):
            shutil.rmtree(workdir)
        os.system("mkdir -p %s" % workdir)

        # Configure the submodule
        if buildsys == "cmake":
            if args.verbose: print "Running cmake..."
            if not exec_cmd("cmake %s %s" % (" ".join(cmakeargs), moduledir), workdir, env=env):
                retval = False
        elif buildsys == "qmake":
            if args.verbose: print "Running qmake..."
            if not exec_cmd("qmake -o Makefile %s" % qmake_project, workdir, env=env):
                retval = False
        elif buildsys == "autotools":
            if args.verbose: print "Running configure..."
            if not exec_cmd("%s/autogen.sh --prefix=%s" % (moduledir, args.prefix), workdir, env=env):
                retval = False

        # Save the cookie
        if retval:
            if args.verbose: print "Saving the cookie..."
            try:
                f = open(os.path.join(workdir, COOKIENAME_CONFIGURE), "w")
                f.write(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                f.close()
            except:
                retval = False

    if retval:
        # Build
        if args.verbose: print "Running make..."
        makecmd = "make"
        if args.jobs:
            makecmd += " -j%d" % args.jobs
        if not exec_cmd(makecmd, workdir):
            retval = False

        # Save the cookie
        if retval:
            if args.verbose: print "Saving the cookie..."
            try:
                f = open(os.path.join(workdir, COOKIENAME_BUILD), "w")
                f.write(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                f.close()
            except:
                retval = False

    if retval:
        # Install
        if args.verbose: print "Running sudo make install..."
        if not exec_cmd("sudo make install", workdir):
            retval = False

    os.chdir(origworkdir)
    return retval

if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("--verbose", action="store_true",
        help="verbose messages")
    parser.add_argument("--rebuild", action="store_true",
        help="rebuild already built modules")
    parser.add_argument("--build-type", metavar="TYPE", type=str, nargs='?',
        help="build type (possible values are Release, Debug and RelWithDebInfo)",
        default="RelWithDebInfo")
    parser.add_argument("--jobs", metavar="JOBS", type=int, nargs='?',
        help="sets the number of parallel jobs, usually it's recommended not to exceed NCORES + 1")
    parser.add_argument("--module", metavar="MODULE", type=str, nargs='*',
        help="build a specific set of modules")
    parser.add_argument("--whitelist", metavar="MODULE", type=str, nargs='*',
        help="build the module specified even if it's on the black list")
    parser.add_argument("--blacklist", metavar="MODULE", type=str, nargs='*',
        help="don't build the module specified by placing it on the black list")
    parser.add_argument("--prefix", metavar="PATH", type=str, nargs='?',
        help="installation prefix", default="/opt/hawaii")

    args = parser.parse_args()
    if not build(args):
        sys.exit(1)

# vim:set ts=4 sw=4 et:
